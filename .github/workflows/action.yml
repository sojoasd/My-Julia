name: CI/CD

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      package_name:
        description: 'The name of the package'
        required: true
        default: 'FindRoot'
      package_version:
        description: 'The version of the package'
        required: true
        default: '0.1.0'

jobs:
  pkg-test:
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: ${{ github.event.inputs.package_name }}
      PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Julia 1.10
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.10.5'
      - name: Run test script
        run: |
          echo "Running tests for $PACKAGE_NAME version $PACKAGE_VERSION"
          echo "julia --project testPkg.jl $PACKAGE_NAME"
          julia --project testPkg.jl $PACKAGE_NAME

  pkg-registry:
    needs: pkg-test
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: ${{ github.event.inputs.package_name }}
      PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Julia 1.10
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.10.5'
      - name: Modify Project.toml version
        run: |
          echo "Registering $PACKAGE_NAME version $PACKAGE_VERSION"
          cat ./$PACKAGE_NAME/Project.toml
          sed -i "s/^version = \".*\"/version = \"$PACKAGE_VERSION\"/" ./$PACKAGE_NAME/Project.toml
          echo "New version:"
          cat ./$PACKAGE_NAME/Project.toml
      - name: Commit and push changes
        run: |
          git config --local user.email "sojoasd@gmail.com"
          git config --local user.name "zeal yen"
          git add .
          git commit -m "Update version to $PACKAGE_VERSION" || echo "No changes to commit"
          git push
      - name: Run pkg registry script
        run: |
          echo "Registering $PACKAGE_NAME version $PACKAGE_VERSION"
          echo "julia --project registerPkg.jl $PACKAGE_NAME"
          julia --project registerPkg.jl $PACKAGE_NAME ${{ secrets.REPO_TOKEN }}

  dylib-generate:
    needs: pkg-registry
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: ${{ github.event.inputs.package_name }}
      PACKAGE_VERSION: ${{ github.event.inputs.package_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Julia 1.10
        uses: julia-actions/setup-julia@v2
        with:
          version: '1.10.5'
      - name: Run dylib generate script
        run: |
          echo "Registering $PACKAGE_NAME version $PACKAGE_VERSION"
          julia --project generateDylib.jl $PACKAGE_NAME $PACKAGE_VERSION ${{ secrets.REPO_TOKEN }}
          ls
          julia --project --sysimage $PACKAGE_NAME.dylib
